#!/usr/bin/env node

/**
 * Module dependencies.
 */
var path = require('path');
var app = require('../app');
var debug = require('debug')('web-tiengnhat:server');
var http = require('http');
var appHttp = require('express')();
let fs = require('fs');

var options = {
    key: fs.readFileSync('./key/key.pem'),
    cert: fs.readFileSync('./key/crt.pem')
};
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4433');
app.set('port', port);

/**
 * Create HTTPS server.
 */

var server = require('https').createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
   console.log('server https running at ' + port);
});
server.on('error', onError);
server.on('listening', onListening);

http.createServer(appHttp).listen(8080, function() {
    console.log('server http running at ' + 8080);
});

// handle static file
appHttp.use(function (req, res) {
  var host = req.headers.host.slice(0, 10)
	res.redirect('https://' + host + '4433' + req.url);
});

var io = require('socket.io')(server);
require('../sockets/chatroom')(io);
require('../signaling_new/io')(io);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}